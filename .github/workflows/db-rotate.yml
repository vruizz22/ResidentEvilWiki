# Workflow para rotar la base de datos de Render cada 20 días
# - Usa un solo secret DATABASE_URL para credenciales.
# - Genera backup, crea nueva BD, actualiza el secret y restaura datos.

name: Rotate Render DB

on:
  workflow_dispatch: # Permite ejecución manual desde la UI
  schedule:
    # Cada 20 días a medianoche (UTC)
    - cron: "0 0 */20 * *"

jobs:
  backup-and-rotate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y postgresql-client jq gh

      - name: Dump current DB
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          # Extraer credenciales de URL (soporta postgresql:// y postgres://)
          uri="$DATABASE_URL"
          # Elimina el prefijo protocol://
          no_proto=${uri#*://}
          # Usuario: antes de ':'
          user=${no_proto%%:*}
          # Contraseña: entre ':' y '@'
          pass=${no_proto#*:}; pass=${pass%%@*}
          # Host: entre '@' y '/'
          host=${no_proto#*@}; host=${host%%/*}
          # DB name: tras '/', sin query
          dbname=${no_proto#*/}; dbname=${dbname%%\?*}

          echo "User: $user, Host: $host, Database: $dbname"
          PGPASSWORD="$pass" pg_dump \
            --format=custom --clean --no-owner \
            --host="$host" --username="$user" "$dbname" \
            -f dump-$(date +'%F').backup

      - name: Upload backup artifact
        uses: actions/upload-artifact@v4
        with:
          name: db-backup-$(date +'%F')
          path: dump-*.backup

      - name: Create new Render DB
        id: newdb
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          response=$(curl -s -X POST https://api.render.com/v1/services \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
                 "serviceType":"postgresql",
                 "name":"ResidentEvilWiki-DB",
                 "plan":"free",
                 "region":"oregon"
               }')
          new_url=$(echo "$response" | jq -r '.service.connectionInfo.databaseUrl')
          echo "dburl=$new_url" >> $GITHUB_OUTPUT

      - name: Update DATABASE_URL secret
        # Usa GitHub CLI para actualizar el secret
        run: gh secret set DATABASE_URL --body "${{ steps.newdb.outputs.dburl }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update web service and trigger deploy
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          WEB_SERVICE_ID: ${{ secrets.WEB_SERVICE_ID }}
        run: |
          # Actualizar env var y desplegar app en Render
          curl -s -X PATCH https://api.render.com/v1/services/$WEB_SERVICE_ID \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{"envVars":[{"key":"DATABASE_URL","value":"'${{ steps.newdb.outputs.dburl }}'"}]}'
          curl -s -X POST https://api.render.com/v1/services/$WEB_SERVICE_ID/deploys \
            -H "Authorization: Bearer $RENDER_API_KEY"

      - name: Restore backup to new DB
        env:
          NEW_DATABASE_URL: ${{ steps.newdb.outputs.dburl }}
        run: |
          uri="$NEW_DATABASE_URL"
          no_proto=${uri#*://}
          user=${no_proto%%:*}
          pass=${no_proto#*:}; pass=${pass%%@*}
          host=${no_proto#*@}; host=${host%%/*}
          dbname=${no_proto#*/}; dbname=${dbname%%\?*}

          echo "Restaurando en: user=$user host=$host db=$dbname"
          PGPASSWORD="$pass" pg_restore \
            --verbose --clean --no-owner \
            --host="$host" --username="$user" --dbname="$dbname" \
            dump-*.backup
          echo "Restauración completa."

# USO:
# 1) Crear en GitHub → Settings → Secrets:
#    - DATABASE_URL: Postgres URL completo de la instancia actual
#    - RENDER_API_KEY: key de Render
#    - WEB_SERVICE_ID: ID de tu servicio web en Render
#  2) Añadir este archivo a .github/workflows
# 3) Cada 20 días el workflow hará backup, creará nueva DB,
#    actualizará el secret y restaurará los datos automáticamente.
