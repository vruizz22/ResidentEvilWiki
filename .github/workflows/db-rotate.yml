# Workflow para rotar la base de datos de Render cada 20 días
# - Usa un solo secret DATABASE_URL para credenciales (External URL para backup).
# - Genera backup, crea nueva BD, actualiza el secret y restaura datos.
# - La app en Render usará la Internal URL para la conexión.

name: Rotate Render DB

# Permisos necesarios para actualizar secrets:
permissions:
  contents: read
  actions: write
  id-token: write

on:
  workflow_dispatch: # Permite ejecución manual desde la UI
  schedule:
    # Cada 20 días a medianoche (UTC)
    - cron: "0 0 */20 * *"

jobs:
  backup-and-rotate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y postgresql-client jq gh

      - name: Dump current DB (External URL)
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          # Extraer credenciales de URL externa
          uri="$DATABASE_URL"
          no_proto=${uri#*://}
          user=${no_proto%%:*}
          pass=${no_proto#*:}; pass=${pass%%@*}
          host=${no_proto#*@}; host=${host%%/*}
          dbname=${no_proto#*/}; dbname=${dbname%%\?*}

          echo "Backup desde: user=$user host=$host db=$dbname"
          PGPASSWORD="$pass" pg_dump \
            --format=custom --clean --no-owner \
            --host="$host" --username="$user" "$dbname" \
            -f dump-$(date +'%F').backup

      - name: Upload backup artifact
        uses: actions/upload-artifact@v4
        with:
          name: db-backup-$(date +'%F')
          path: dump-*.backup

      - name: Create new Render DB
        id: newdb
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          response=$(curl -s -X POST https://api.render.com/v1/services \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
                 "serviceType":"postgresql",
                 "name":"ResidentEvilWiki-DB",
                 "plan":"free",
                 "region":"oregon"
               }')
          # Desde connectionInfo.databaseUrl extraemos las URLs internal y external
          internal_url=$(echo "$response" | jq -r '.service.connectionInfo.databaseUrl')
          external_url=$(echo "$response" | jq -r '.service.connectionInfo.externalDatabaseUrl')
          echo "internal_url=$internal_url" >> $GITHUB_OUTPUT
          echo "external_url=$external_url" >> $GITHUB_OUTPUT

      - name: Update repo secret DATABASE_URL to External URL
        run: |
          # Usa external_url si existe, sino internal_url como fallback
          ext_url="${{ steps.newdb.outputs.external_url }}"
          if [[ -z "$ext_url" || "$ext_url" == "null" ]]; then
            echo "external_url no disponible; usando internal_url"
            ext_url="${{ steps.newdb.outputs.internal_url }}"
          fi
          echo "Actualizando secret DATABASE_URL a: $ext_url"
          gh secret set DATABASE_URL --body "$ext_url"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update web service and trigger deploy
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          WEB_SERVICE_ID: ${{ secrets.WEB_SERVICE_ID }}
          INTERNAL_URL: ${{ steps.newdb.outputs.internal_url }}
        run: |
          # Actualiza la variable DATABASE_URL de tu app a la Internal URL
          curl -s -X PATCH https://api.render.com/v1/services/$WEB_SERVICE_ID \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{"envVars":[{"key":"DATABASE_URL","value":"'${INTERNAL_URL}'"}]}'
          # Dispara un nuevo deploy
          curl -s -X POST https://api.render.com/v1/services/$WEB_SERVICE_ID/deploys \
            -H "Authorization: Bearer $RENDER_API_KEY"

      - name: Restore backup to new DB (External URL)
        env:
          NEW_DATABASE_URL: ${{ steps.newdb.outputs.external_url }}
        run: |
          uri="$NEW_DATABASE_URL"
          no_proto=${uri#*://}
          user=${no_proto%%:*}
          pass=${no_proto#*:}; pass=${pass%%@*}
          host=${no_proto#*@}; host=${host%%/*}
          dbname=${no_proto#*/}; dbname=${dbname%%\?*}

          echo "Restaurando en: user=$user host=$host db=$dbname"
          PGPASSWORD="$pass" pg_restore \
            --verbose --clean --no-owner \
            --host="$host" --username="$user" --dbname="$dbname" \
            dump-*.backup
          echo "Restauración completa en la nueva base de datos."

# USO:
# 1) Crear en GitHub → Settings → Secrets:
#    - DATABASE_URL: Postgres URL completo de la instancia actual
#    - RENDER_API_KEY: key de Render
#    - WEB_SERVICE_ID: ID de tu servicio web en Render
#  2) Añadir este archivo a .github/workflows
# 3) Cada 20 días el workflow hará backup, creará nueva DB,
#    actualizará el secret y restaurará los datos automáticamente.
#
# ---
# NOTA SOBRE LAS URLS DE BASE DE DATOS EN ESTE WORKFLOW
#
# Este workflow rota la base de datos de Render y maneja dos tipos de URL:
#
# 1. EXTERNAL DATABASE URL: Es la URL de conexión externa de la base de datos (accesible desde fuera de Render).
#    - Se guarda como secret DATABASE_URL en el repositorio.
#    - Se usa para hacer backups y restauraciones desde GitHub Actions u otros servicios externos.
#
# 2. INTERNAL DATABASE URL: Es la URL interna de la base de datos (solo accesible desde servicios dentro de Render).
#    - Se configura como variable de entorno DATABASE_URL en el deploy de la app en Render.
#    - Es más segura y rápida para la app, ya que no expone la base de datos al exterior.
#
# FLUJO RESUMIDO:
# - El secret DATABASE_URL del repo siempre apunta a la EXTERNAL URL de la base de datos más reciente.
# - La variable de entorno DATABASE_URL en Render siempre apunta a la INTERNAL URL de la base de datos más reciente.
# - Así, los workflows y desarrolladores externos usan la EXTERNAL URL, y la app en Render usa la INTERNAL URL.
#
# Esto garantiza seguridad, flexibilidad y automatización en la rotación periódica de la base de datos.
# ---
